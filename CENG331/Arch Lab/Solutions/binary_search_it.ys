#AYTAC SEKMEN 2575983
.pos 0x0
init:
    irmovq stack, %rsp
    irmovq $6, %rdx
    irmovq array_begin, %rdi
    irmovq array_end, %rsi
    call binary_search
    halt

#implement your code below (DO NOT CHANGE/REMOVE THIS COMMENT)


binary_search:
    rrmovq %rdi, %rbx # rbx=begin
    rrmovq %rsi, %rcx # rcx=end
    jmp control
control:
    rrmovq %rdx, %r8  # r8=value
    rrmovq %rcx,%r12
    subq %rbx, %rcx # rbx begin rcx end, rcx=end-begin
    jg myloop
    jmp son
myloop:
    irmovq $16, %r9
    dvvq %r9, %rcx
    irmovq $8, %r11
    mllq %r11, %rcx
    addq %rbx, %rcx # mid
    mrmovq (%rcx), %r10 # mid deger
    subq %r10, %r8 # r8=value -*mid oldu
    je cond1
    jg cond2
    jmp control
cond1:
    irmovq $8, %r11
    addq %r11, %rcx
    subq %rdi, %rcx
    irmovq $8, %rbx
    dvvq %rbx, %rcx
    rrmovq %rcx,%rax
    ret
cond2:
    irmovq $8, %r11
    addq %r11, %rcx
    rrmovq %rcx,%rbx # begin
    rrmovq %r12, %rcx # end
    jmp control
son:
    irmovq $-1, %rax
    ret



    

#implement your code above (DO NOT CHANGE/REMOVE THIS COMMENT)

.pos 0x1008
array_begin:
    .quad 1
    .quad 2
    .quad 3
    .quad 5
    .quad 6
    .quad 7
    .quad 9
    .quad 11
array_end:
    .quad 0
.pos 0x1F00
stack:
    .quad 0


